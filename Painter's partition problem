
The painter’s partition problem
Difficulty Level : Hard
We have to paint n boards of length {A1, A2…An}. There are k painters available and each takes 1 unit time to paint 1 unit of board. The problem is to find the minimum time to get 
this job done under the constraints that any painter will only paint continuous sections of boards, say board {2, 3, 4} or only board {1} or nothing but not board {2, 4, 5}.

Examples: 

Input : k = 2, A = {10, 10, 10, 10} 
Output : 20. 

Input : k = 2, A = {10, 20, 30, 40} 
Output : 60.


*********************************************************************************************************************************************************************

#include<iostream>
#include<algorithm>
#include<bits/stdc++.h>
using namespace std;

bool checkOutcome(int arr[] ,int n ,int painter ,int mid){
   int sum=0 , painterCount=1 ;   
   for (int i = 0; i < n; i++)
   {    
      
       if (sum+arr[i] > mid)
       {
           
           sum=arr[i] ;
           painterCount++ ;
           if (painterCount > painter)
           {
               return false ;
           }
       }
           else{
                sum+=arr[i] ;
           }
       
       
   }
   
   return true ;
}

int main(){
    int arr[]={10,20,30,40},n=4 ,painter=2 ; 
    int start, sum=0 , k;
    
    for(int i = 0; i < n; i++)
    {   
        sum+=arr[i];
    }
    start=arr[n-1] ;
    int end = sum ;
    int ans = 0 ;
    while (start<=end)
    {
        int mid = (start+end)/2  ;
        int possibleOutcome = checkOutcome(arr , n , painter , mid) ;
        if(possibleOutcome)
        {   
             ans = mid ;
             end=mid-1 ;
        
        }
        else{
              start=mid+1 ;
        }
        
    }
    
    cout<<"your no. is :"<<" "<<ans ;

        return 0 ;
    }
